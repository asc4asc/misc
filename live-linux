#!/usr/bin/env bash
readonly DISTRI=testing # "testing" "stable" "bookworm" "trixie" "bullseye" (oldoldstable oldstable stable testing sid)
# readonly X="" # terminal ohne X 
readonly X="gnome" # "gnome","" terminal ohne X 
readonly BOOT="toram" # "toram","" normal from usb ...
# readonly FUNC="iperf-master" # iperf-master,"" no special function / not so easy to implement without confusing?
ADD="EKF" # EKF 
#-------------------------------------------------------
[[ ${X} == "gnome" ]] && readonly GNOME=true || readonly GNOME=false
[[ ${ADD} == "EKF" ]] && readonly ADD4EKF=true || readonly ADD4EKF=false
[[ ${ADD} == "EKF" ]] && readonly EKFTOOLS=true || readonly EKFTOOLS=false
# [[ ${FUNC} == "iperf-master" ]] && readonly STARTIPERF=true || readonly STARTIPERF=false
#-------------------------------------------------------

function repair-sudo4ekf-after-install
{
cat > ${TDIR}/config/includes.chroot/usr/local/bin/sudo4ekf << "EOF"
echo 'ekf ALL=(ALL:ALL) NOPASSWD:ALL' > /tmp/ekf4testing && sudo cp /tmp/ekf4testing /etc/sudoers.d
EOF
sudo chmod a+x  ${TDIR}/config/includes.chroot/usr/local/bin/*
}

function cat-autostart-entry4gnome
{
cat > ${TDIR}/config/includes.chroot/etc/skel/.config/autostart/term.desktop << EOF
[Desktop Entry]
Type=Application
# Exec=gnome-terminal 
# Exec=sudo gnome-terminal
Exec=gnome-terminal -- run-parts autostart.dir
Hidden=false
NoDisplay=false
X-GNOME-Autostart-enabled=true
Name[en_US]=term
Name=term
Comment[en_US]=
Comment=
X-GNOME-Autostart-Delay=0
EOF
return 0
}

function auto-start4gnome
{
  mkdir -p ${TDIR}/config/includes.chroot/etc/skel/.config/autostart
  cat-autostart-entry4gnome
  mkdir -p ${TDIR}/config/includes.chroot/etc/skel/.config
  echo "yes" > ${TDIR}/config/includes.chroot/etc/skel/.config/gnome-initial-setup-done 
  return 0
}

function setup-calamares-installer
{
  mkdir -p ${TDIR}/config/includes.chroot/etc/calamares
  cp -r calamares/* ${TDIR}/config/includes.chroot/etc/calamares/
}

function live-config
{
( mkdir -p $TDIR && cd $TDIR && lb clean  
lb config noauto \
          --mirror-bootstrap "http://deb.debian.org/debian/" \
	  --mirror-binary "http://deb.debian.org/debian/" \
	  --security "false" --updates "false" \
	  --distribution ${DISTRI} \
	  --cache-packages "false" \
	  --archive-areas "main non-free-firmware contrib" \
	  --bootappend-live "boot=live username=ekf ${BOOT}" \
	  --bootappend-live-failsafe "boot=live ${BOOT} nosplash" \
	  "${@}" 
)
#( mkdir -p $TDIR && cd $TDIR && lb clean && lb config --mirror-bootstrap "http://deb.debian.org/debian/" --mirror-binary "http://deb.debian.org/debian/" --security "false" --updates "false" --distribution ${DISTRI} --cache-packages "false" --archive-areas "main non-free-firmware contrib" --bootappend-live "boot=live username=ekf ${BOOT}" --bootappend-live-failsafe "boot=live ${BOOT} nosplash" )
#( mkdir -p $TDIR && cd $TDIR && lb clean && lb config --mirror-bootstrap "http://deb.debian.org/debian/" --mirror-binary "http://deb.debian.org/debian/" --security false --updates "false" --distribution ${DISTRI} --cache-packages "false" --archive-areas "main non-free-firmware contrib" --bootappend-live "boot=live username=ekf ${BOOT}" --bootappend-live-failsafe "boot=live $BOOT nosplash" )
# ( mkdir -p $TDIR && cd $TDIR && lb clean && lb config --mirror-bootstrap "http://deb.debian.org/debian/" --mirror-binary "http://deb.debian.org/debian/" --security false --updates "false" --distribution ${DISTRI} --cache-packages "false" --archive-areas "main non-free-firmware contrib" --bootappend-live "boot=live username=ekf ${BOOT}" --bootappend-live-failsafe "boot=live $BOOT noapic nolapic noapm nospm nodma nomce nosplash vga=788" )
# ( mkdir -p $TDIR && cd $TDIR && lb clean && lb config --mirror-bootstrap "http://deb.debian.org/debian/" --mirror-binary "http://deb.debian.org/debian/" --security false --updates "false" --distribution "bookworm" --debian-installer "live" --debian-installer-distribution "bookworm" --cache-packages "false" --archive-areas "main non-free-firmware contrib" --bootappend-live "boot=live username=ekf toram" )
return 0
}

function cat-autostart-i2c-test
{
echo i2c-tools >> ${TDIR}/config/package-lists/i2c.list.chroot
cat > ${TDIR}/config/includes.chroot/etc/skel/autostart.dir/300-i2c-test << 'EOF'
#!/bin/bash
#
sudo modprobe i2c-dev
SMBus=$(sudo i2cdetect -l |grep smbus|cut -d"-" -f2|cut  -f1)
echo "Test start:"
while true; do
  sudo i2cset -y ${SMBus} 0x2E 0xa0 0x80 b || bash
  sleep 0.01
  sudo i2cset -y ${SMBus} 0x2E 0xa0 0x00 b || bash
  sleep 0.01
done
EOF
}

function cat-autostart-network
{
cat > ${TDIR}/config/includes.chroot/etc/skel/autostart.dir/100-network << 'EOF'
#!/bin/bash
# ip addr | grep "inet " | grep -v host
host=$(ip route |grep default|cut -d" " -f3)
iperf3 -c ${host}
EOF
}

function cat-autostart-reboot
{
cat > ${TDIR}/config/includes.chroot/etc/skel/autostart.dir/900-restart << 'EOF'
#!/bin/bash
# sudo efibootmgr -o 0017 # pc6 ssd
sudo reboot
EOF
}

function cat-autostart-powercycle
{
cat > ${TDIR}/config/includes.chroot/etc/skel/autostart.dir/900-restart << 'EOF'
#!/bin/bash
sudo rtcwake -s 80 -m off  
EOF
}

function cat-autostart-sleep
{
cat > ${TDIR}/config/includes.chroot/etc/skel/autostart.dir/050-sleep << 'EOF'
#!/bin/bash
gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type "nothing" # nicht einschlafen!
gsettings set org.gnome.SessionManager logout-prompt "false" # Damit man auch mit dem Griff runterfahren kann ohne 60s zu warten.
gsettings set org.gnome.settings-daemon.plugins.power power-button-action "interactive"
gsettings set org.gnome.shell favorite-apps "['org.gnome.Terminal.desktop']"
echo "Use CTRL D to leave the shell"  
# sudo lspci -v
read -t 5 -p "Use Tab / 2*<return> key to start a shell or CTRL C to break." && bash
echo 
exit 0
EOF
}

function cat-autostart-bash
{
cat > ${TDIR}/config/includes.chroot/etc/skel/autostart.dir/500-starttest << 'EOF'
#!/bin/bash
bash
EOF
}

function add-iperf3-4gnome
{
  mkdir -p ${TDIR}/config/includes.chroot/etc/skel/autostart.dir
  cat-autostart-network
  chmod a+x ${TDIR}/config/includes.chroot/etc/skel/autostart.dir/100-network
}



function add-iperf3-4gnome
{
  mkdir -p ${TDIR}/config/includes.chroot/etc/skel/autostart.dir
  cat-autostart-network
  chmod a+x ${TDIR}/config/includes.chroot/etc/skel/autostart.dir/100-network
}

function add-test2auto
{
  mkdir -p ${TDIR}/config/includes.chroot/etc/skel/autostart.dir
#  cat-autostart-sleep
  cat-autostart-bash
#  cat-autostart-reboot
#  cat-autostart-powercycle
#  cat-autostart-i2c-test
  chmod a+x ${TDIR}/config/includes.chroot/etc/skel/autostart.dir/*
}

# readonly TDIR="live-${FUNC}-${X}4term-${BOOT}-${DISTRI}"
${ADD4EKF} && ADD="-$ADD"
readonly TDIR="live-${X}4term-${BOOT}-${DISTRI}${ADD}"
echo ${TDIR}
sleep 3

live-config # Erstellen der Grundstrucktur mit einigen Parametern.

${GNOME} && echo task-gnome-desktop >> ${TDIR}/config/package-lists/desktop.list.chroot
# ${GNOME} && echo task-cinnamon-desktop >> ${TDIR}/config/package-lists/desktop.list.chroot
# ${GNOME} && echo live-task-cinnamon >> ${TDIR}/config/package-lists/desktop.list.chroot
# echo gnome-core >> ${TDIR}/config/package-lists/desktop.list.chroot
${GNOME} && echo calamares-settings-debian calamares >> ${TDIR}/config/package-lists/installer.list.chroot

${ADD4EKF} && echo chrony >> ${TDIR}/config/package-lists/time.list.chroot
${ADD4EKF} && echo remmina >> ${TDIR}/config/package-lists/remotedesk.list.chroot

${GNOME} && auto-start4gnome 
${ADD4EKF} && echo iperf3 >> ${TDIR}/config/package-lists/iperf.list.chroot
# ${GNOME} && add-iperf3-4gnome
${GNOME} && add-test2auto
${GNOME} && setup-calamares-installer

# cp -r /usr/share/live/build/bootloaders/* ${TDIR}/config/bootloaders/
# cd  ${TDIR}/config/bootloaders
# echo "Modify timeout in all bootloaders." 
# bash
cp -r bootloaders/* ${TDIR}/config/bootloaders/
mkdir -p ${TDIR}/config/includes.chroot/etc/skel

function prog4ekf-misc
{
mkdir -p ${TDIR}/config/includes.chroot/usr/local/sbin
mkdir -p ${TDIR}/config/includes.chroot/usr/local/bin
cp bin4ekf/* ${TDIR}/config/includes.chroot/usr/local/bin
cp sbin4ekf/* ${TDIR}/config/includes.chroot/usr/local/sbin
cp -r ekfuefi/* ${TDIR}/config/includes.chroot/usr/local/
cp -r TEST.tar ${TDIR}/config/includes.chroot/usr/local/

cat > ${TDIR}/config/includes.chroot/usr/local/bin/make-test-menu << 'EOF'
tar -xzf /usr/local/TEST.tar 
echo 'export PATH=$PATH:"."' >>$HOME/.bashrc
EOF

cat > ${TDIR}/config/includes.chroot/usr/local/bin/prog4ekf << 'EOF'
board=$(sudo dmidecode -s baseboard-product-name) 
now=$(date +"%Y-%m-%d")
rand=$(($RANDOM %9000 + 1000))
sern=$(sudo dmidecode -s baseboard-serial-number)
build=$(sudo dmidecode -s bios-version)
bk=${board%-*}
# echo ${bk}-${sern}-${now}.BIN
sudo progspi -r file && mv file ${bk}_${sern}_${build}_${now}_${rand}.BIN
bash 
cd /usr/local
case ${bk} in
  PC6|SC6)
    sudo progspi -os=0 ${board%-*}UEFI.BIN
    ;;
  *)
    sudo progspi ${board%-*}UEFI.BIN
    ;;
esac
exit 0
EOF
sudo chmod a+x  ${TDIR}/config/includes.chroot/usr/local/sbin/*
sudo chmod a+x  ${TDIR}/config/includes.chroot/usr/local/bin/*
}
echo libc6-i386 > ${TDIR}/config/package-lists/ekf.list.chroot # needed for progsi ....
${ADD4EKF} && prog4ekf-misc

function create-hist-misc
{
cat > ${TDIR}/config/includes.chroot/etc/skel/.bash_history << "EOF"
gsettings set org.gnome.shell favorite-apps "['org.gnome.Terminal.desktop']"
gsettings set org.gnome.settings-daemon.plugins.power idle-dim false
gsettings set org.gnome.desktop.session idle-delay 0
gsettings set org.gnome.SessionManager logout-prompt 'false' # Damit man auch mit dem Griff runterfahren kann ohne 60s zu warten.
gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-timeout 0
gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-timeout 0
gsettings set org.gnome.settings-daemon.plugins.power power-button-action 'interactive'
gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing'
sudo4ekf
sudo calamares 
echo "nameserver 172.21.130.2" >/etc/resolv.conf
echo "nameserver 172.21.130.3" >>/etc/resolv.conf
EOF
}
${ADD4EKF} && create-hist-misc

function add2hist-efiboot-check
{
cat >> ${TDIR}/config/includes.chroot/etc/skel/.bash_history << "EOF"
sudo efibootmgr --label ekf4nvme --create --disk=/dev/nvme0n1p1 --part=1 --loader='EFI\debian\grubx64.efi'
sudo efibootmgr --label deb4sda  --create --disk=/dev/sda --part=1 --loader='EFI\debian\grubx64.efi'
sudo efibootmgr --create --gpt --disk /dev/nvme0n1 --part 1 --loader='\vmlinuz' --unicode 'rw initrd=\initrd.img rw root=/dev/nvme0n1p2' --label nvmestart
sudo efibootmgr --create --gpt --disk /dev/sda --part 1 --loader='\vmlinuz' --unicode 'rw initrd=\initrd.img rw root=/dev/sda2' --label sda2start
EOF
}
${ADD4EKF} && add2hist-efiboot-check

function add2history-prog
{
cat >> ${TDIR}/config/includes.chroot/etc/skel/.bash_history << "EOF"
history
sudo poweroff
sudo prog4ekf
EOF
}
${ADD4EKF} && add2history-prog

function add2history-net
{
cat >> ${TDIR}/config/includes.chroot/etc/skel/.bash_history << "EOF"
nmap db-test -p 445 --packet-trace
gnome-terminal -- sudo namespace4iperf3.bash -i enx00e04c680a03 && gnome-terminal -- sudo namespace4iperf3.bash -c -i enx00e04c68353b
sudo sispmctl -A 4 --Aafter 1 --Ado off --Aafter 1 --Ado on --Aloop 1
sudo lspci -v
EOF
}
${ADD4EKF} && add2history-net

function auto-info-start-with-bashrc
{
cat >> ${TDIR}/config/includes.chroot/etc/skel/.bashrc << 'EOF' # 
case $(tty) in
/dev/pts/1 | /dev/tty4)
  board=$(sudo dmidecode -s baseboard-product-name)
  #echo "Interrupt with <CTRL C>"
  echo "This is: "${board}
  #echo "To update the UEFI BIOS please call: prog4ekf"
  #echo "After this please call: sudo poweroff"
  ;;
*)
  ;;
esac
EOF
} 
${ADD4EKF} && auto-info-start-with-bashrc

# sudo reboot

function auto-info-start-with-bashrc-gnome
{
cat >> ${TDIR}/config/includes.chroot/etc/skel/.bashrc << 'EOF' # 
case $(tty) in
/dev/pts/0)
  gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type "nothing" # nicht einschlafen!
  gsettings set org.gnome.SessionManager logout-prompt "false" # Damit man auch mit dem Griff runterfahren kann ohne 60s zu warten.
  gsettings set org.gnome.settings-daemon.plugins.power power-button-action "interactive"
  gsettings set org.gnome.shell favorite-apps "['org.gnome.Terminal.desktop']"
  ;;
*)
  ;;
esac
EOF
}
${GNOME} && auto-info-start-with-bashrc-gnome

${ADD4EKF} && echo efibootmgr pciutils usbutils sispmctl > ${TDIR}/config/package-lists/debug.list.chroot # needed for progsi ....
${ADD4EKF} && echo sispmctl >> ${TDIR}/config/package-lists/debug.list.chroot # needed for usb powercycler
${ADD4EKF} && echo nmap > ${TDIR}/config/package-lists/network-debug.list.chroot # network debug

${ADD4EKF} && repair-sudo4ekf-after-install

( cd ${TDIR} && lb build )
# ( cd ${TDIR} && lb bootstrap && lb chroot && lb binary && lb source )

echo move ${TDIR}/live-image-amd64.hybrid.iso ${TDIR}.iso
mv ${TDIR}/live-image-amd64.hybrid.iso ${TDIR}.iso
# rm -r ${TDIR}
kvm -cdrom ${TDIR}.iso -m 4G
ls -l ${TDIR}.iso 
